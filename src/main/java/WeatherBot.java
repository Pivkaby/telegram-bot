import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;

public class WeatherBot extends TelegramLongPollingBot {
    private static final String BOT_TOKEN = "";
    private static final String BOT_USERNAME = "";

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            String username = update.getMessage().getFrom().getUserName() != null
                    ? update.getMessage().getFrom().getUserName()
                    : update.getMessage().getFrom().getFirstName();

            if (messageText.equals("/start")) {
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText(
                        "–ü—Ä–∏–≤–µ—Ç! üëã\n" +
                                "–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ.\n" +
                                "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.\n" +
                                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, London, Paris\n\n" +
                                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                                "‚Ä¢ {–≥–æ—Ä–æ–¥} - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n" +
                                "‚Ä¢ /forecast {–≥–æ—Ä–æ–¥} - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π\n" +
                                "‚Ä¢ /weather_history {–≥–æ—Ä–æ–¥} - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–≥–æ–¥—ã\n" +
                                "‚Ä¢ /forecast_history {–≥–æ—Ä–æ–¥} - –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n" +
                                "‚Ä¢ /db_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
                );
                sendMessage(message);
                return;
            }

            if (messageText.startsWith("/forecast ")) {
                String city = messageText.substring("/forecast ".length());
                SendMessage message = new SendMessage();
                message.setChatId(chatId);

                try {
                    List<WeatherData> forecasts = WeatherForecastAPI.getForecast(city);

                    if (forecasts != null && !forecasts.isEmpty()) {
                        DatabaseManager.saveForecastRequests(
                                chatId,
                                username,
                                forecasts,
                                city
                        );

                        StringBuilder forecastText = new StringBuilder("üå¶Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è " + city + ":\n\n");

                        for (WeatherData forecast : forecasts) {
                            forecastText.append(forecast.toString()).append("\n\n");
                        }

                        message.setText(forecastText.toString());
                    } else {
                        message.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ " + city);
                    }

                    sendMessage(message);

                } catch (Exception e) {
                    SendMessage errorMessage = new SendMessage();
                    errorMessage.setChatId(chatId);
                    errorMessage.setText(
                            "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:\n" +
                                    e.getMessage()
                    );
                    sendMessage(errorMessage);
                }
                return;
            }

            if (messageText.startsWith("/weather_history ")) {
                String city = messageText.substring("/weather_history ".length());
                SendMessage message = new SendMessage();
                message.setChatId(chatId);

                List<WeatherData> weatherHistory = DatabaseManager.getWeatherHistory(chatId, city);

                if (!weatherHistory.isEmpty()) {
                    StringBuilder historyText = new StringBuilder("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è " + city + ":\n\n");

                    for (int i = 0; i < Math.min(5, weatherHistory.size()); i++) {
                        historyText.append("–ó–∞–ø—Ä–æ—Å #").append(i + 1).append(":\n")
                                .append(weatherHistory.get(i).toString())
                                .append("\n\n");
                    }

                    message.setText(historyText.toString());
                } else {
                    message.setText("‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è " + city + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                }

                sendMessage(message);
                return;
            }

            if (messageText.startsWith("/forecast_history ")) {
                String city = messageText.substring("/forecast_history ".length());
                SendMessage message = new SendMessage();
                message.setChatId(chatId);

                List<WeatherData> forecastHistory = DatabaseManager.getForecastHistory(chatId, city);

                if (!forecastHistory.isEmpty()) {
                    StringBuilder historyText = new StringBuilder("üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è " + city + ":\n\n");

                    for (int i = 0; i < Math.min(5, forecastHistory.size()); i++) {
                        historyText.append("–ü—Ä–æ–≥–Ω–æ–∑ #").append(i + 1).append(":\n")
                                .append(forecastHistory.get(i).toString())
                                .append("\n\n");
                    }

                    message.setText(historyText.toString());
                } else {
                    message.setText("‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è " + city + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                }

                sendMessage(message);
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if (messageText.equals("/db_stats")) {
                SendMessage message = new SendMessage();
                message.setChatId(chatId);

                DatabaseManager.DatabaseStats stats = DatabaseManager.getDatabaseStats();
                message.setText(stats.toString());

                sendMessage(message);
                return;
            }

            if (messageText.equals("/cleanup_db")) {
                SendMessage message = new SendMessage();
                message.setChatId(chatId);

                DatabaseManager.cleanupOldRecords();
                message.setText("üßπ –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.");

                sendMessage(message);
                return;
            }

            try {
                WeatherData weather = WeatherAPI.getWeather(messageText);

                SendMessage message = new SendMessage();
                message.setChatId(chatId);

                if (weather != null) {
                    DatabaseManager.saveWeatherRequest(
                            chatId,
                            username,
                            weather,
                            messageText
                    );

                    message.setText(
                            "üåç –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ " + messageText + ":\n\n" +
                                    weather.toString()
                    );
                } else {
                    message.setText(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ " + messageText +
                                    "\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞."
                    );
                }

                sendMessage(message);

            } catch (Exception e) {
                SendMessage errorMessage = new SendMessage();
                errorMessage.setChatId(chatId);
                errorMessage.setText(
                        "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã:\n" +
                                e.getMessage()
                );
                sendMessage(errorMessage);
            }
        }
    }

    private void sendMessage(SendMessage message) {
        try {
            message.enableHtml(true);
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return BOT_USERNAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }
}