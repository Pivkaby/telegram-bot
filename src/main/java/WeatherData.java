import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class WeatherData {
    private double temperature;
    private double feelsLike;
    private int humidity;
    private int pressure;
    private double windSpeed;
    private int windDegree;
    private int cloudiness;
    private String description;
    private String main;
    private LocalDateTime forecastDate;

    public double getTemperature() {
        return temperature;
    }

    public void setTemperature(double temperature) {
        this.temperature = temperature;
    }

    public double getFeelsLike() {
        return feelsLike;
    }

    public void setFeelsLike(double feelsLike) {
        this.feelsLike = feelsLike;
    }

    public int getHumidity() {
        return humidity;
    }

    public void setHumidity(int humidity) {
        this.humidity = humidity;
    }

    public int getPressure() {
        return pressure;
    }

    public void setPressure(int pressure) {
        this.pressure = pressure;
    }

    public double getWindSpeed() {
        return windSpeed;
    }

    public void setWindSpeed(double windSpeed) {
        this.windSpeed = windSpeed;
    }

    public int getWindDegree() {
        return windDegree;
    }

    public void setWindDegree(int windDegree) {
        this.windDegree = windDegree;
    }

    public int getCloudiness() {
        return cloudiness;
    }

    public void setCloudiness(int cloudiness) {
        this.cloudiness = cloudiness;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getMain() {
        return main;
    }

    public void setMain(String main) {
        this.main = main;
    }

    public LocalDateTime getForecastDate() {
        return forecastDate;
    }

    public void setForecastDate(LocalDateTime forecastDate) {
        this.forecastDate = forecastDate;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        if (forecastDate != null) {
            sb.append("üìÖ –î–∞—Ç–∞: ")
                    .append(forecastDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")))
                    .append("\n");
        }

        sb.append("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ").append(String.format("%.1f", temperature)).append("¬∞C\n")
                .append("üå¨Ô∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ").append(String.format("%.1f", feelsLike)).append("¬∞C\n")
                .append("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ").append(humidity).append("%\n")
                .append("üìä –î–∞–≤–ª–µ–Ω–∏–µ: ").append(pressure).append(" –≥–ü–∞\n")
                .append("üçÉ –í–µ—Ç–µ—Ä: ").append(String.format("%.1f", windSpeed)).append(" –º/—Å, ").append(getWindDirection(windDegree)).append("\n")
                .append("‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ").append(cloudiness).append("%\n")
                .append("üìù –û–ø–∏—Å–∞–Ω–∏–µ: ").append(translateWeatherDescription(description));

        return sb.toString();
    }

    private String getWindDirection(int degrees) {
        String[] directions = {"–°", "–°–í", "–í", "–Æ–í", "–Æ", "–Æ–ó", "–ó", "–°–ó"};
        int index = (int)((degrees + 22.5) % 360 / 45);
        return directions[index];
    }

    private String translateWeatherDescription(String description) {
        switch (description.toLowerCase()) {
            case "clear sky": return "–Ø—Å–Ω–æ–µ –Ω–µ–±–æ";
            case "few clouds": return "–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å";
            case "scattered clouds": return "–†–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞";
            case "broken clouds": return "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å";
            case "overcast clouds": return "–ü–∞—Å–º—É—Ä–Ω–æ";
            case "light rain": return "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å";
            case "moderate rain": return "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å";
            case "heavy rain": return "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å";
            case "thunderstorm": return "–ì—Ä–æ–∑–∞";
            case "snow": return "–°–Ω–µ–≥";
            case "light snow": return "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥";
            case "heavy snow": return "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥";
            case "mist": return "–õ–µ–≥–∫–∏–π —Ç—É–º–∞–Ω";
            case "fog": return "–¢—É–º–∞–Ω";
            case "haze": return "–õ–µ–≥–∫–∞—è –¥—ã–º–∫–∞";
            default: return description;
        }
    }
}